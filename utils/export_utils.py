"""
Export utilities for AI Trip Planner application.
Provides functionality to export travel plans in various formats.
"""

import json
import os
import datetime
from typing import Dict, Any, Optional
from pathlib import Path
import markdown
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor
import tempfile


class TravelPlanExporter:
    """Handles export of travel plans in various formats."""
    
    def __init__(self, output_dir: str = "./exports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
    
    def export_to_json(self, travel_plan: Dict[str, Any], filename: Optional[str] = None) -> str:
        """Export travel plan to JSON format."""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"travel_plan_{timestamp}.json"
        
        filepath = self.output_dir / filename
        
        # Add metadata
        export_data = {
            "metadata": {
                "exported_at": datetime.datetime.now().isoformat(),
                "version": "1.0",
                "format": "json"
            },
            "travel_plan": travel_plan
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        return str(filepath)
    
    def export_to_pdf(self, travel_plan: str, filename: Optional[str] = None) -> str:
        """Export travel plan to PDF format using ReportLab."""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"travel_plan_{timestamp}.pdf"
        
        filepath = self.output_dir / filename
        
        # Create PDF document
        doc = SimpleDocTemplate(str(filepath), pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=HexColor('#667eea'),
            alignment=1  # Center alignment
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=HexColor('#2c3e50'),
            spaceBefore=20
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            leading=14
        )
        
        # Add title
        story.append(Paragraph("üåç AI Travel Plan", title_style))
        story.append(Spacer(1, 20))
        
        # Add metadata
        metadata_text = f"""
        <b>Generated:</b> {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}<br/>
        <b>Created by:</b> AI Travel Planner<br/>
        <b>Format:</b> PDF Export
        """
        story.append(Paragraph(metadata_text, normal_style))
        story.append(Spacer(1, 20))
        
        # Convert markdown to plain text and add content
        lines = travel_plan.split('\n')
        for line in lines:
            line = line.strip()
            if not line:
                story.append(Spacer(1, 6))
                continue
                
            if line.startswith('# '):
                # Main heading
                story.append(Paragraph(line[2:], title_style))
            elif line.startswith('## '):
                # Sub heading
                story.append(Paragraph(line[3:], heading_style))
            elif line.startswith('### '):
                # Sub sub heading
                story.append(Paragraph(line[4:], heading_style))
            elif line.startswith('- ') or line.startswith('* '):
                # List item
                story.append(Paragraph(f"‚Ä¢ {line[2:]}", normal_style))
            else:
                # Regular text
                story.append(Paragraph(line, normal_style))
        
        # Add footer
        story.append(PageBreak())
        story.append(Spacer(1, 20))
        footer_text = """
        <b>Disclaimer:</b> This travel plan was generated by AI. Please verify all information, 
        especially prices, operating hours, and travel requirements before your trip.
        """
        story.append(Paragraph(footer_text, normal_style))
        story.append(Spacer(1, 10))
        story.append(Paragraph("Generated with ‚ù§Ô∏è by AI Trip Planner", normal_style))
        
        # Build PDF
        doc.build(story)
        
        return str(filepath)
    
    def export_to_markdown(self, travel_plan: str, filename: Optional[str] = None) -> str:
        """Export travel plan to Markdown format."""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"travel_plan_{timestamp}.md"
        
        filepath = self.output_dir / filename
        
        # Create markdown content with metadata
        markdown_content = f"""# üåç AI Travel Plan

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** AI Travel Planner  
**Format:** Markdown Export

---

{travel_plan}

---

*This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        return str(filepath)
    
    def export_to_txt(self, travel_plan: str, filename: Optional[str] = None) -> str:
        """Export travel plan to plain text format."""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"travel_plan_{timestamp}.txt"
        
        filepath = self.output_dir / filename
        
        # Convert markdown to plain text (basic conversion)
        import re
        text_content = re.sub(r'#+\s*', '', travel_plan)  # Remove markdown headers
        text_content = re.sub(r'\*\*(.*?)\*\*', r'\1', text_content)  # Remove bold
        text_content = re.sub(r'\*(.*?)\*', r'\1', text_content)  # Remove italic
        
        # Add header
        full_content = f"""AI TRAVEL PLAN
Generated: {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}
Created by: AI Travel Planner
Format: Text Export

{text_content}

---
This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.
"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(full_content)
        
        return str(filepath)


# Global exporter instance
exporter = TravelPlanExporter()


def export_travel_plan(travel_plan: str, formats: list = ["pdf", "json", "md", "txt"]) -> Dict[str, str]:
    """Export travel plan in multiple formats."""
    results = {}
    
    for format_type in formats:
        try:
            if format_type == "pdf":
                results["pdf"] = exporter.export_to_pdf(travel_plan)
            elif format_type == "json":
                # Convert markdown to structured data for JSON
                plan_data = {
                    "content": travel_plan,
                    "sections": _parse_markdown_sections(travel_plan)
                }
                results["json"] = exporter.export_to_json(plan_data)
            elif format_type == "md":
                results["markdown"] = exporter.export_to_markdown(travel_plan)
            elif format_type == "txt":
                results["text"] = exporter.export_to_txt(travel_plan)
        except Exception as e:
            results[f"{format_type}_error"] = str(e)
    
    return results


def _parse_markdown_sections(markdown_content: str) -> Dict[str, str]:
    """Parse markdown content into sections."""
    sections = {}
    current_section = "general"
    current_content = []
    
    for line in markdown_content.split('\n'):
        if line.startswith('#'):
            if current_content:
                sections[current_section] = '\n'.join(current_content).strip()
            current_section = line.strip('#').strip().lower().replace(' ', '_')
            current_content = []
        else:
            current_content.append(line)
    
    if current_content:
        sections[current_section] = '\n'.join(current_content).strip()
    
    return sections 